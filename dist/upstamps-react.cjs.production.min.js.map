{"version":3,"file":"upstamps-react.cjs.production.min.js","sources":["../src/Context.tsx","../src/useUpstampsContext.tsx","../src/Flag.tsx","../src/useFlag.tsx"],"sourcesContent":["import React, { createContext, useEffect, useReducer, useMemo } from \"react\";\n//Constants\nimport { apiUrl } from \"./constants\";\n\nexport interface UpStampsConfigParams {\n  clientId: string;\n  envKey: string;\n  projectKey: string;\n}\n\nexport interface UpStampsState {\n  loading: boolean;\n  error: boolean;\n  flags: Array<string>;\n  params: UpStampsConfigParams;\n}\n\nexport interface UpStampsContextState {\n  state: UpStampsState;\n}\n\nexport interface UpStampsProviderProps extends UpStampsConfigParams {\n  children: React.ReactNode;\n}\n\nexport type ReducerSetFlags = {\n  type: \"set-flags\";\n  payload: {\n    flags: Array<string>;\n    error?: boolean;\n    loading: boolean;\n  };\n};\n\nexport type ReducerActions = ReducerSetFlags;\n\nexport const UpStampsContext = createContext<UpStampsContextState>(\n  {} as UpStampsContextState\n);\n\nlet reducer = (state: UpStampsState, action: ReducerActions) => {\n  switch (action.type) {\n    case \"set-flags\":\n      return { ...state, ...action.payload };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n\nexport const UpStampsProvider: React.FC<UpStampsProviderProps> = ({\n  children,\n  clientId,\n  envKey,\n  projectKey,\n}) => {\n  const params = {\n    clientId,\n    envKey,\n    projectKey,\n  };\n\n  const [state, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: false,\n    flags: [],\n    params,\n  });\n\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  useEffect(() => {\n    let ignore = false;\n    const onFetchFlags = async () => {\n      try {\n        //If the flags are collected, do not fetch again\n        if (state.flags.length > 0) return;\n        //Service Url\n        const url = `${apiUrl}/flags/${clientId}/${projectKey}/${envKey}`;\n\n        //Response with the all the flags\n        const response = await fetch(url);\n        const { flags } = await response.json();\n\n        //Filters flags a creates a simple array\n        const data = flags.map((item: { name: string }) => item.name);\n\n        //Updates the state with the flags\n        if (!ignore) {\n          dispatch({\n            type: \"set-flags\",\n            payload: { flags: data, loading: false },\n          });\n        }\n      } catch (e) {\n        dispatch({\n          type: \"set-flags\",\n          payload: { flags: [], loading: false, error: true },\n        });\n      }\n    };\n    onFetchFlags();\n    return () => {\n      ignore = true;\n    };\n  }, [state.flags, clientId, envKey, projectKey]);\n\n  return (\n    <UpStampsContext.Provider value={value}>\n      {children}\n    </UpStampsContext.Provider>\n  );\n};\n","import { useContext } from \"react\";\nimport { UpStampsContext } from \"./Context\";\n\nconst useUpStampsContext = () => {\n  const context = useContext(UpStampsContext);\n  if (context === undefined) {\n    throw new Error(\"UpStampsContext must be used with UpStampsProvider!\");\n  }\n  return context;\n};\n\nexport default useUpStampsContext;\n","import React, { Fragment, useMemo } from \"react\";\nimport useUpstampsContext from \"./useUpstampsContext\";\n\nexport interface FlagProps {\n  children: React.ReactNode;\n  name: string;\n}\n\nexport const Flag: React.FC<FlagProps> = ({ children, name }) => {\n  const { state } = useUpstampsContext();\n  const show = useMemo(() => state.flags.indexOf(name) !== -1, [state.flags]);\n\n  //Hide the feature\n  if (!show) return null;\n\n  return <Fragment>{children}</Fragment>;\n};\n","import { useMemo } from \"react\";\nimport useUpstampsContext from \"./useUpstampsContext\";\n\nexport const useFlag = (name: string) => {\n  const { state } = useUpstampsContext();\n  const flags = useMemo(() => state.flags, [state.flags]);\n  console.log(\"Render\");\n\n  return {\n    show: flags.indexOf(name) !== -1,\n  } as const;\n};\n"],"names":["UpStampsContext","createContext","reducer","state","action","type","payload","Error","useUpStampsContext","context","useContext","undefined","_a","children","name","useMemo","flags","indexOf","React","Fragment","clientId","envKey","projectKey","_b","dispatch","value","useEffect","ignore","length","fetch","apiUrl","json","data","map","item","loading","error","Provider","console","log","show"],"mappings":"uKAoCaA,EAAkBC,gBAC7B,IAGEC,EAAU,SAACC,EAAsBC,UAC3BA,EAAOC,UACR,4CACSF,GAAUC,EAAOE,uBAGvB,IAAIC,MAAM,0BAA0BH,EAAOC,QC3CjDG,EAAqB,eACnBC,EAAUC,aAAWV,WACXW,IAAZF,QACI,IAAIF,MAAM,8DAEXE,gBCAgC,SAACG,OAAEC,aAAUC,SAC5CX,mBACKY,WAAQ,kBAAqC,IAA/BZ,EAAMa,MAAMC,QAAQH,KAAc,CAACX,EAAMa,QAK7DE,gBAACC,gBAAUN,GAFA,yDFqC6C,SAACD,OAChEC,aACAO,aACAC,WACAC,eAQMC,sDANS,CACbH,WACAC,SACAC,gBAGKnB,OAAOqB,OAORC,EAAQV,WAAQ,iBAAO,CAAEZ,QAAOqB,cAAa,CAACrB,EAAOqB,WAE3DE,aAAU,eACJC,GAAS,yJAILxB,EAAMa,MAAMY,OAAS,SAKFC,MAHRC,2CAAgBV,MAAYE,MAAcD,oBAGxCT,SACgBmB,sBAAzBf,EAAUJ,eAGZoB,EAAOhB,EAAMiB,KAAI,SAACC,UAA2BA,EAAKpB,QAGnDa,GACHH,EAAS,CACPnB,KAAM,YACNC,QAAS,CAAEU,MAAOgB,EAAMG,SAAS,kCAIrCX,EAAS,CACPnB,KAAM,YACNC,QAAS,CAAEU,MAAO,GAAImB,SAAS,EAAOC,OAAO,mCAK5C,WACLT,GAAS,KAEV,CAACxB,EAAMa,MAAOI,EAAUC,EAAQC,IAGjCJ,gBAAClB,EAAgBqC,UAASZ,MAAOA,GAC9BZ,oBG1GgB,SAACC,OACdX,YACFa,EAAQD,WAAQ,kBAAMZ,EAAMa,QAAO,CAACb,EAAMa,eAChDsB,QAAQC,IAAI,UAEL,CACLC,MAA+B,IAAzBxB,EAAMC,QAAQH"}