{"version":3,"file":"upstamps-react.cjs.production.min.js","sources":["../src/Context.tsx","../src/Flag.tsx","../src/useFlag.tsx"],"sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\n\nexport interface UpStampsConfigParams {\n  clientId: string;\n  envKey: string;\n  projectKey: string;\n}\n\nexport interface UpStampsState {\n  loading: boolean;\n  error: boolean;\n  flags: Array<string>;\n  params: UpStampsConfigParams;\n}\n\nexport interface UpStampsContextState {\n  state: UpStampsState;\n}\n\nexport interface UpStampsProviderProps extends UpStampsConfigParams {\n  children: React.ReactNode;\n}\n\nexport const UpStampsContext = createContext<UpStampsContextState>(\n  {} as UpStampsContextState\n);\n\nconst apiUrl: string = \"https://services.upstamps.com/api/flags\";\n\nexport const UpStampsProvider: React.FC<UpStampsProviderProps> = ({\n  children,\n  clientId,\n  envKey,\n  projectKey,\n}) => {\n  const params = {\n    clientId,\n    envKey,\n    projectKey,\n  };\n\n  const [state, dispatch] = useState({\n    loading: true,\n    error: false,\n    flags: [],\n    params,\n  });\n\n  const [contextValue, setContextValue] = useState({\n    state,\n    dispatch,\n  });\n\n  useEffect(() => {\n    const onFetchFlags = async () => {\n      try {\n        //If the flags are collected, do not fetch again\n        if (state.flags.length > 0) return;\n        //Service Url\n        const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}`;\n        //Response with the all the flags\n        const response = await fetch(url);\n        const { flags } = await response.json();\n        //Filters flags a creates a simple array\n        const data = flags.map((item: { name: string }) => item.name);\n        //Updates the state with the flags\n        dispatch(prevState => {\n          return { ...prevState, flags: data, loading: false };\n        });\n      } catch (e) {\n        dispatch(prevState => {\n          return { ...prevState, error: true, loading: false };\n        });\n      }\n    };\n    onFetchFlags();\n  }, [state.flags, clientId, envKey, projectKey]);\n\n  useEffect(() => {\n    setContextValue({ ...contextValue, state });\n  }, [state]);\n\n  return (\n    <UpStampsContext.Provider value={contextValue}>\n      {children}\n    </UpStampsContext.Provider>\n  );\n};\n","import React, { Fragment, useContext } from \"react\";\nimport { UpStampsContext } from \"./Context\";\n\nexport interface FlagProps {\n  children: React.ReactNode;\n  name: string;\n}\n\nexport const Flag: React.FC<FlagProps> = ({ children, name }) => {\n  const { state } = useContext(UpStampsContext);\n  const show = state.flags.indexOf(name) !== -1;\n\n  //Hide the feature\n  if (!show) return null;\n\n  return <Fragment>{children}</Fragment>;\n};\n","import { useContext, useMemo } from \"react\";\nimport { UpStampsContext } from \"./Context\";\n\nexport const useFlag = (name: string) => {\n  const { state } = useContext(UpStampsContext);\n  const flags = useMemo(() => state.flags, [state.flags]);\n\n  return {\n    show: flags.indexOf(name) !== -1,\n  } as const;\n};\n"],"names":["UpStampsContext","createContext","_a","children","name","flags","indexOf","React","Fragment","clientId","envKey","projectKey","_b","state","dispatch","_c","contextValue","setContextValue","useEffect","length","fetch","apiUrl","json","data_1","map","item","prevState","loading","error","Provider","value","show","useMemo"],"mappings":"uKAuBaA,EAAkBC,gBAC7B,iBChBuC,SAACC,OAAEC,aAAUC,gBAER,0BAAzBC,MAAMC,QAAQF,GAK1BG,gBAACC,gBAAUL,GAFA,yDDgB6C,SAACD,OAChEC,aACAM,aACAC,WACAC,eAQMC,kDANS,CACbH,WACAC,SACAC,gBAGKE,OAAOC,OAORC,mCAACC,OAAcC,cAKrBC,aAAU,2JAIAL,EAAMR,MAAMc,OAAS,SAIFC,MAFRC,2CAAUZ,MAAYE,MAAcD,oBAElCR,SACgBoB,sBAAzBjB,EAAUH,eAEZqB,EAAOlB,EAAMmB,KAAI,SAACC,UAA2BA,EAAKrB,QAExDU,GAAS,SAAAY,mCACKA,IAAWrB,MAAOkB,EAAMI,SAAS,oCAG/Cb,GAAS,SAAAY,mCACKA,IAAWE,OAAO,EAAMD,SAAS,uCAKlD,CAACd,EAAMR,MAAOI,EAAUC,EAAQC,IAEnCO,aAAU,WACRD,2BAAqBD,IAAcH,aAClC,CAACA,IAGFN,gBAACP,EAAgB6B,UAASC,MAAOd,GAC9Bb,oBEjFgB,SAACC,OACdS,8BAGD,CACLkB,MAA+B,IAHnBC,WAAQ,kBAAMnB,EAAMR,QAAO,CAACQ,EAAMR,QAGlCC,QAAQF"}