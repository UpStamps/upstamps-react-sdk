{"version":3,"file":"upstamps-react.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/Utils/constants.ts","../src/Contexts/Context.tsx","../src/Contexts/useUpstampsContext.tsx","../src/ABTests/shared.ts","../src/ABTests/ABTest.tsx","../src/Utils/functions.ts","../src/Segments/shared.ts","../src/Scopes/ScopeContext.tsx","../src/Flags/Flag.tsx","../src/Remotes/RemoteFlag.tsx","../src/Segments/Segment.tsx","../src/ABTests/useABTest.tsx","../src/Flags/useFlag.tsx","../src/Remotes/useRemoteFlag.tsx","../src/Segments/useSegment.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export const apiUrl: string = \"https://services.upstamps.com/api\";\n","import React, { createContext, useEffect, useReducer, useMemo } from \"react\";\n//Constants\nimport { apiUrl } from \"../Utils/constants\";\n//Utils\nimport localForage from \"localforage\";\n\nexport interface UpStampsConfigParams {\n  clientId: string;\n  envKey: string;\n  projectKey: string;\n}\n\nexport interface UpStampsState {\n  loading: boolean;\n  error: boolean;\n  flags: Array<string>;\n  remotes: Array<{ name: string; data: {} }>;\n  params: UpStampsConfigParams;\n}\n\nexport interface UpStampsContextState {\n  state: UpStampsState;\n}\n\nexport interface UpStampsProviderProps extends UpStampsConfigParams {\n  children: React.ReactNode;\n}\n\nexport type ReducerSetFlags = {\n  type: \"set-flags\";\n  payload: {\n    flags: Array<string>;\n    loading: boolean;\n  };\n};\n\nexport type ReducerSetFlagsError = {\n  type: \"set-flags-error\";\n  payload: {\n    error: boolean;\n    loading: boolean;\n  };\n};\n\nexport type ReducerSetRemotes = {\n  type: \"set-remotes\";\n  payload: {\n    remotes: Array<{\n      name: string;\n      data: {};\n    }>;\n    loading: boolean;\n  };\n};\n\nexport type ReducerSetRemotesError = {\n  type: \"set-remotes-error\";\n  payload: {\n    error: boolean;\n    loading: boolean;\n  };\n};\n\nexport type ReducerActions =\n  | ReducerSetFlags\n  | ReducerSetFlagsError\n  | ReducerSetRemotes\n  | ReducerSetRemotesError;\n\nexport const UpStampsContext = createContext<UpStampsContextState>(\n  {} as UpStampsContextState\n);\n\nlet reducer = (state: UpStampsState, action: ReducerActions) => {\n  switch (action.type) {\n    case \"set-flags\":\n      return { ...state, ...action.payload };\n    case \"set-flags-error\":\n      return { ...state, ...action.payload };\n    case \"set-remotes\":\n      return { ...state, ...action.payload };\n    case \"set-remotes-error\":\n      return { ...state, ...action.payload };\n\n    default:\n      throw new Error(`Unhandled action type`);\n  }\n};\n\nexport const UpStampsProvider: React.FC<UpStampsProviderProps> = ({\n  children,\n  clientId,\n  envKey,\n  projectKey\n}) => {\n  const params = {\n    clientId,\n    envKey,\n    projectKey\n  };\n\n  const [state, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: false,\n    flags: [],\n    remotes: [],\n    params\n  });\n\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  //Get All Flags on Init\n  useEffect(() => {\n    let ignore = false;\n    //Get All the Flags\n    const onFetchFlags = async () => {\n      try {\n        //If the flags are collected, do not fetch again\n        if (state.flags.length > 0) return;\n\n        //Service Url\n        const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}/flags`;\n\n        //Response with the all the flags\n        const response = await fetch(url);\n        const { flags } = await response.json();\n\n        //Filters flags a creates a simple array\n        const data = flags.map((item: { name: string }) => item.name);\n\n        //Updates the state with the flags\n        if (!ignore) {\n          dispatch({\n            type: \"set-flags\",\n            payload: {\n              flags: data,\n              loading: false\n            }\n          });\n          //Update or save on localStorage\n          await localForage.setItem(\"flags\", data);\n        }\n      } catch (e) {\n        dispatch({\n          type: \"set-flags-error\",\n          payload: { loading: false, error: true }\n        });\n      }\n    };\n    //Get All the Remote Flags\n    const onFetchRemotes = async () => {\n      try {\n        //If the Remotes Flags are collected, do not fetch again\n        if (state.remotes.length > 0) return;\n\n        //Service Url\n        const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}/remotes`;\n\n        //Response with the all the remotes flags\n        const response = await fetch(url);\n        const { remotes } = await response.json();\n\n        //Updates the state with the remotes flags\n        if (!ignore) {\n          dispatch({\n            type: \"set-remotes\",\n            payload: { remotes, loading: false }\n          });\n          //Update or save on localStorage\n          await localForage.setItem(\"remotes\", remotes);\n        }\n      } catch (e) {\n        dispatch({\n          type: \"set-remotes-error\",\n          payload: { loading: false, error: true }\n        });\n      }\n    };\n    onFetchFlags();\n    onFetchRemotes();\n    return () => {\n      ignore = true;\n    };\n  }, []);\n\n  return (\n    <UpStampsContext.Provider value={value}>\n      {children}\n    </UpStampsContext.Provider>\n  );\n};\n","import { useContext } from \"react\";\nimport { UpStampsContext } from \"./Context\";\n\nconst useUpStampsContext = () => {\n  const context = useContext(UpStampsContext);\n  if (context === undefined) {\n    throw new Error(\"UpStampsContext must be used with UpStampsProvider!\");\n  }\n  return context;\n};\n\nexport default useUpStampsContext;\n","export const variantTypes = [\"A\", \"B\"];\n\nexport const fetchHandler = async (url: string, name: string) => {\n  try {\n    //Response with the all the A/B Tests\n    const response = await fetch(url);\n    const { ABTesting } = await response.json();\n\n    const result = ABTesting.filter((item: any) => item.name === name);\n    const show = result.length > 0;\n    const randomVariant = Math.floor(Math.random() * variantTypes.length);\n\n    return {\n      show,\n      variant: variantTypes[randomVariant],\n      loading: false\n    };\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const emitterHandler = async (\n  variant: string,\n  name: string,\n  url: string\n) => {\n  try {\n    const post_body = {\n      name,\n      varA: variant === \"A\" ? 1 : 0,\n      varB: variant === \"B\" ? 1 : 0\n    };\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: { \"content-type\": \"application/x-www-form-urlencoded\" },\n      body: JSON.stringify(post_body)\n    });\n\n    return await response.json();\n  } catch (e) {\n    return e;\n  }\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n//Utils\nimport { apiUrl } from \"../Utils/constants\";\nimport { fetchHandler, emitterHandler } from \"./shared\";\nimport localForage from \"localforage\";\n\nexport interface ABTestProps {\n  children: React.ReactNode;\n  testRef: React.RefObject<any>;\n  name: string;\n  localStorage?: boolean;\n}\n\ninterface IState {\n  component: React.ReactNode;\n  loading: boolean;\n  error: boolean;\n  variant: string;\n  show: boolean;\n}\n\ninterface ContainerProps {\n  children: React.ReactNode;\n  emitter: () => {};\n}\n\nconst Container = React.forwardRef(\n  (props: ContainerProps, ref: React.Ref<any>) => {\n    React.useImperativeHandle(ref, () => ({ emitter: props.emitter }));\n\n    return <Fragment>{props.children}</Fragment>;\n  }\n);\n\nexport const ABTest = ({\n  children,\n  name,\n  testRef,\n  localStorage = false\n}: ABTestProps) => {\n  const context = useUpstampsContext();\n  const [state, setState] = useState<IState>({\n    component: [],\n    loading: true,\n    error: false,\n    variant: \"A\",\n    show: false\n  });\n\n  const { clientId, projectKey, envKey } = context.state.params;\n  const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}/testing`;\n\n  const onRenderChildren = (variant: string) => {\n    const component = React.Children.map(children, (child: any) => {\n      if (child.props.name === variant) {\n        return child;\n      }\n    });\n\n    setState((prevState: IState) => {\n      return {\n        ...prevState,\n        component\n      };\n    });\n  };\n\n  useEffect(() => {\n    const onFetch = async () => {\n      try {\n        const storageData = (await localForage.getItem(name)) as IState;\n\n        //Checks the current data on local storage\n        if (localStorage && storageData !== null) {\n          console.log(\"ABTest local\");\n          onRenderChildren(storageData.variant);\n\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              ...storageData\n            };\n          });\n        } else {\n          console.log(\"ABTest remote\");\n          const { show, loading, variant } = await fetchHandler(url, name);\n\n          onRenderChildren(variant);\n\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              show,\n              variant,\n              loading\n            };\n          });\n\n          //Updates local storage with the new data\n          await localForage.setItem(name, {\n            show,\n            variant,\n            loading\n          });\n        }\n      } catch (e) {\n        setState((prevState: IState) => {\n          return { ...prevState, error: true, loading: false };\n        });\n      }\n    };\n    onFetch();\n  }, [name, context.state.params]);\n\n  const onEmitter = async () => {\n    try {\n      return await emitterHandler(state.variant, name, url);\n    } catch (e) {\n      return e;\n    }\n  };\n\n  if (!state.loading && !state.show) return null;\n\n  return (\n    <Container ref={testRef} emitter={onEmitter}>\n      {state.component}\n    </Container>\n  );\n};\n\nconst Variant = ({\n  children,\n  name\n}: {\n  children: React.ReactNode;\n  name: string;\n}) => {\n  return React.cloneElement(\n    <Fragment />,\n    { name },\n    <Fragment>{children}</Fragment>\n  );\n};\n\nVariant.displayName = \"ABTest.Variant\";\n\nABTest.Variant = Variant;\n","export const queryBuilder = (params: {}) => {\n  const esc = encodeURIComponent;\n\n  return Object.keys(params)\n    .filter(\n      key => params[key] !== undefined && params[key] && params[key] !== null\n    )\n    .map(key => esc(key) + \"=\" + esc(params[key]))\n    .join(\"&\");\n};\n","//Utils\nimport { queryBuilder } from \"../Utils/functions\";\n\nexport const handleFetch = async (\n  url: string,\n  name: string,\n  params: { country?: string; client?: string; clientType?: string }\n) => {\n  try {\n    const query = queryBuilder({\n      name: name,\n      country: params.country,\n      client: params.client,\n      clientType: params.clientType\n    });\n\n    const response = await fetch(`${url}?${query}`, {\n      method: \"GET\"\n    });\n\n    const { segment } = await response.json();\n    const show = segment.length > 0;\n\n    return {\n      segment,\n      show,\n      loading: false\n    };\n  } catch (e) {\n    throw e;\n  }\n};\n","import React, { createContext, useEffect, useReducer, useMemo } from \"react\";\n//Constants\nimport { apiUrl } from \"../Utils/constants\";\n//Contexts\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n\nexport interface ScopesConfigParams {\n  name?: string | null;\n  email: string;\n}\n\nexport interface ScopesState {\n  loading: boolean;\n  error: boolean;\n  params: ScopesConfigParams;\n}\n\nexport interface ScopesContextState {\n  state: ScopesState;\n}\n\nexport interface ScopesProviderProps extends ScopesConfigParams {\n  children: React.ReactNode;\n}\n\nexport type ReducerSetScope = {\n  type: \"set-scope\";\n  payload: {\n    success: boolean;\n    loading: boolean;\n  };\n};\n\nexport type ReducerSetScopeError = {\n  type: \"set-scope-error\";\n  payload: {\n    error: boolean;\n    loading: boolean;\n  };\n};\n\nexport type ReducerScopeActions = ReducerSetScope | ReducerSetScopeError;\n\nexport const ScopesContext = createContext<ScopesContextState>(\n  {} as ScopesContextState\n);\n\nlet reducer = (state: ScopesState, action: ReducerScopeActions) => {\n  switch (action.type) {\n    case \"set-scope\":\n      return { ...state, ...action.payload };\n    case \"set-scope-error\":\n      return { ...state, ...action.payload };\n\n    default:\n      throw new Error(`Unhandled action type`);\n  }\n};\n\nexport const ScopesProvider: React.FC<ScopesProviderProps> = ({\n  children,\n  name,\n  email\n}) => {\n  const context = useUpstampsContext();\n\n  const params = {\n    name,\n    email\n  };\n\n  const [state, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: false,\n    params\n  });\n\n  const { clientId, projectKey } = context.state.params;\n\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n  useEffect(() => {\n    let ignore = false;\n    const onSetScope = async () => {\n      try {\n        //Service Url\n        const url = `${apiUrl}/${clientId}/${projectKey}/scopes/add`;\n\n        const post_body = {\n          name,\n          email\n        };\n\n        await fetch(url, {\n          method: \"POST\",\n          headers: { \"content-type\": \"application/x-www-form-urlencoded\" },\n          body: JSON.stringify(post_body)\n        });\n\n        window.localStorage.setItem(\"upstamps_scope_email\", email);\n\n        if (!ignore) {\n          dispatch({\n            type: \"set-scope\",\n            payload: { success: true, loading: false }\n          });\n        }\n      } catch (e) {\n        dispatch({\n          type: \"set-scope-error\",\n          payload: { loading: false, error: true }\n        });\n      }\n    };\n\n    //Get the email from localStorage\n    const storageEmail = window.localStorage.getItem(\"upstamps_scope_email\");\n\n    //Only set a scope if the email is null or different\n    if (storageEmail !== email) {\n      onSetScope();\n    }\n    return () => {\n      ignore = true;\n    };\n  }, [email]);\n\n  return (\n    <ScopesContext.Provider value={value}>{children}</ScopesContext.Provider>\n  );\n};\n","import React, { Fragment, useMemo } from \"react\";\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n\nexport interface FlagProps {\n  children: React.ReactNode;\n  name: string;\n}\n\nexport const Flag: React.FC<FlagProps> = ({ children, name }) => {\n  const { state } = useUpstampsContext();\n  const show = useMemo(() => state.flags.indexOf(name) !== -1, [\n    state.flags,\n    name,\n  ]);\n\n  //Hide the feature\n  if (!show) return null;\n\n  return <Fragment>{children}</Fragment>;\n};\n","import React, { Fragment, useMemo } from \"react\";\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n\nexport interface RemoteFlagProps {\n  children: any;\n  name: string;\n}\n\nexport const RemoteFlag: React.FC<RemoteFlagProps> = ({ children, name }) => {\n  const { state } = useUpstampsContext();\n\n  const remote = useMemo(\n    () => state.remotes.filter((item: any) => item.name === name),\n    [state.remotes, name]\n  );\n  const verifyRemote = useMemo(() => remote.length > 0, [remote]);\n  const data = verifyRemote ? remote[0].data : {};\n\n  //Hide the feature\n  if (!verifyRemote) return null;\n\n  return <Fragment>{children(data)}</Fragment>;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\n//Utils\nimport { apiUrl } from \"../Utils/constants\";\nimport { handleFetch } from \"./shared\";\nimport isEqual from \"lodash.isequal\";\n//Context\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n//LocalStorage\nimport localForage from \"localforage\";\n\ninterface IState {\n  loading: boolean;\n  error: boolean;\n  show: boolean;\n}\n\ninterface Params {\n  country?: string;\n  client?: string;\n  clientType?: string;\n}\n\ninterface IStorageData extends IState {\n  params: Params;\n}\n\nexport interface SegmentProps extends Params {\n  children: React.ReactNode;\n  name: string;\n  params: Params;\n  localStorage?: boolean;\n}\n\nexport const Segment: React.FC<SegmentProps> = ({\n  children,\n  name,\n  params,\n  localStorage = false\n}) => {\n  const context = useUpstampsContext();\n  const [state, setState] = useState<IState>({\n    loading: true,\n    error: false,\n    show: false\n  });\n\n  const { clientId, projectKey, envKey } = context.state.params;\n  const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}/segment`;\n\n  useEffect(() => {\n    const onFetch = async () => {\n      try {\n        const storageData = (await localForage.getItem(name)) as IStorageData;\n\n        //Checks the current data on local storage\n        if (localStorage && storageData !== null) {\n          console.log(\"Segment local = \");\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              show: isEqual(params, storageData.params),\n              loading: false\n            };\n          });\n        } else {\n          const { show, loading } = await handleFetch(url, name, params);\n          console.log(\"Segment remote\");\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              show,\n              loading\n            };\n          });\n          //Updates local storage with the new data\n          await localForage.setItem(name, {\n            show,\n            loading,\n            params\n          });\n        }\n      } catch (e) {\n        setState((prevState: IState) => {\n          return { ...prevState, error: true, loading: false };\n        });\n      }\n    };\n    onFetch();\n  }, [name, context.state.params]);\n\n  //Hide the feature\n  if (!state.show) return null;\n\n  return <Fragment>{children}</Fragment>;\n};\n","import { useEffect, useState } from \"react\";\n//Context\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n//Utils\nimport { apiUrl } from \"../Utils/constants\";\nimport { fetchHandler, emitterHandler } from \"./shared\";\nimport localForage from \"localforage\";\n\ninterface IState {\n  loading: boolean;\n  error: boolean;\n  show: boolean;\n  variant: string;\n}\n\nexport const useABTest = (name: string, localStorage: boolean = false) => {\n  const context = useUpstampsContext();\n  const [state, setState] = useState<IState>({\n    loading: true,\n    error: false,\n    show: false,\n    variant: \"A\"\n  });\n  const { clientId, projectKey, envKey } = context.state.params;\n  const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}/testing`;\n\n  useEffect(() => {\n    const onFetch = async () => {\n      try {\n        const storageData = (await localForage.getItem(name)) as IState;\n\n        //Checks the current data on local storage\n        if (localStorage && storageData !== null) {\n          console.log(\"useABTest local\");\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              ...storageData\n            };\n          });\n        } else {\n          console.log(\"useABTest remote\");\n          const { show, loading, variant } = await fetchHandler(url, name);\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              show,\n              variant,\n              loading\n            };\n          });\n          //Updates local storage with the new data\n          await localForage.setItem(name, {\n            show,\n            variant,\n            loading\n          });\n        }\n      } catch (e) {\n        setState((prevState: IState) => {\n          return { ...prevState, error: true, loading: false };\n        });\n      }\n    };\n    onFetch();\n  }, [name, context.state.params]);\n\n  const onEmitter = async () => {\n    try {\n      return await emitterHandler(state.variant, name, url);\n    } catch (e) {\n      return e;\n    }\n  };\n\n  return {\n    show: state.show,\n    error: state.error,\n    loading: state.loading,\n    variant: state.variant,\n    emitter: onEmitter\n  } as const;\n};\n","import { useMemo } from \"react\";\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n\nexport const useFlag = (name: string) => {\n  const { state } = useUpstampsContext();\n  const flags = useMemo(() => state.flags, [state.flags]);\n\n  return {\n    show: flags.indexOf(name) !== -1,\n  } as const;\n};\n","import { useMemo } from \"react\";\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n\nexport const useRemoteFlag = (name: string) => {\n  const { state } = useUpstampsContext();\n\n  const remote = useMemo(\n    () => state.remotes.filter((item: any) => item.name === name),\n    [state.remotes, name]\n  );\n  const verifyRemote = useMemo(() => remote.length > 0, [remote]);\n\n  return {\n    show: verifyRemote,\n    data: verifyRemote ? remote[0].data : {},\n  } as const;\n};\n","import { useState, useEffect } from \"react\";\nimport useUpstampsContext from \"../Contexts/useUpstampsContext\";\n//Utils\nimport { apiUrl } from \"../Utils/constants\";\nimport { handleFetch } from \"./shared\";\nimport localForage from \"localforage\";\nimport isEqual from \"lodash.isequal\";\n\ninterface IState {\n  loading: boolean;\n  error: boolean;\n  show: boolean;\n}\n\ninterface Params {\n  country?: string;\n  client?: string;\n  clientType?: string;\n}\n\ninterface IStorageData extends IState {\n  params: Params;\n}\n\nexport const useSegment = (\n  name: string,\n  params: { country?: string; client?: string; clientType?: string },\n  localStorage: boolean = false\n) => {\n  const context = useUpstampsContext();\n  const [state, setState] = useState<IState>({\n    loading: true,\n    error: false,\n    show: false\n  });\n  const { clientId, projectKey, envKey } = context.state.params;\n  const url = `${apiUrl}/${clientId}/${projectKey}/${envKey}/segment`;\n\n  useEffect(() => {\n    const onFetch = async () => {\n      try {\n        const storageData = (await localForage.getItem(name)) as IStorageData;\n        //Checks the current data on local storage\n        if (localStorage && storageData !== null) {\n          console.log(\"useSegment local\");\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              show: isEqual(params, storageData.params),\n              loading: false\n            };\n          });\n        } else {\n          const { show, loading } = await handleFetch(url, name, params);\n          console.log(\"useSegment remote\");\n          setState((prevState: IState) => {\n            return {\n              ...prevState,\n              show,\n              loading\n            };\n          });\n\n          //Updates local storage with the new data\n          await localForage.setItem(name, {\n            show,\n            loading,\n            params\n          });\n        }\n      } catch (e) {\n        setState((prevState: IState) => {\n          return { ...prevState, error: true, loading: false };\n        });\n      }\n    };\n    onFetch();\n  }, [name, context.state.params]);\n\n  return {\n    show: state.show,\n    error: state.error,\n    loading: state.loading\n  } as const;\n};\n"],"names":["_catch","body","recover","result","e","then","Symbol","iterator","asyncIterator","apiUrl","UpStampsContext","createContext","reducer","state","action","type","payload","Error","useUpStampsContext","context","useContext","undefined","variantTypes","fetchHandler","url","name","fetch","response","json","show","ABTesting","filter","item","length","randomVariant","Math","floor","random","variant","loading","emitterHandler","method","headers","JSON","stringify","varA","varB","Container","React","forwardRef","props","ref","useImperativeHandle","emitter","Fragment","children","ABTest","testRef","localStorage","useUpstampsContext","useState","component","error","setState","params","clientId","projectKey","envKey","onRenderChildren","Children","map","child","prevState","useEffect","localForage","getItem","storageData","console","log","setItem","onFetch","Variant","cloneElement","displayName","handleFetch","query","esc","encodeURIComponent","Object","keys","key","join","queryBuilder","country","client","clientType","segment","ScopesContext","useMemo","flags","indexOf","remote","remotes","verifyRemote","data","email","useReducer","dispatch","value","ignore","window","success","onSetScope","Provider","isEqual","onFetchFlags","onFetchRemotes"],"mappings":"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"}